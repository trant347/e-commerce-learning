#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('frontend:server');
var http = require('http');



var consul = require('consul')({
    host: "consul",
    port: 8500,
    promisify: true
});

var serviceLocation = require('../consul/serviceLocation');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
    if(process.env.NODE_ENV == 'production') {        

        var services = ['product-service', 'authentication-service', 'calendar-service'];

        services.map(
                service => {
                  return consul.watch({
                    method: consul.health.service,
                    options: {
                        service: service,
                        passing: true
                    }
                  }, function (error, data) {
                      console.log(error);
                  })
                }
              ).forEach(watcher => {
                watcher.on('change', (data, res) => {
                    console.log('received discovery update:', data.length);
        
                    data.forEach(({Service}) => {
                        console.log(Service);
                        console.log({address: Service.Address, port: Service.Port})
                        serviceLocation.setServiceLocation(Service.Service, {address: Service.Address, port: Service.Port});
                    });
                });
            });

       

        //list all services managed by consul - no need
        consul.agent.service.list(function (err, result) {
            if (err) console.log(err);
            Object.keys(result).forEach( key => {
                let Service = result[key];
                console.log({name: Service.Service, address: Service.Address, port: Service.Port})
                serviceLocation.setServiceLocation(Service.Service, {
                    address: Service.Address,
                    port: Service.Port
                });


            })
        });


        
    }

});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
